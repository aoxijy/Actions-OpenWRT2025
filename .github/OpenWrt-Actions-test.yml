#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#


name: 编译OpenWrt固件-test

on:
  workflow_dispatch:
    inputs:

      MODEL:
        required: true
        description: 选择需要编译的固件
        type: choice
        default: Lean_x86_64
        options:
          - Lean_x86_64
          - immortalwrt_x86_64

      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean

      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean

# 定时触发编译(1,5,10,15,20,25,30早3点)
#  schedule:
#    - cron: 0 17 4,9,14,19,24,31 * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]


env: 
  TZ: Asia/Shanghai
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  WECHAT_WORK_URL: ${{ secrets.WECHAT_WORK_URL }}
  WECHAT_WORK_TOKEN: ${{ secrets.WECHAT_WORK_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  GITHUB_RELEASE: https://github.com/xcz-ns/OpenWrt-AutoBuild/releases

jobs: 
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    name: 编译 ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(
          github.event_name == 'schedule' && '["Lean_x86_64","immortalwrt_x86_64"]' || 
          format('["{0}"]', github.event.inputs.MODEL )
          )}}

    steps:
    - name: Checkout 仓库
      uses: actions/checkout@v4

    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "FIRMWARE_MESSAGE=${FIRMWARE_MESSAGE}" >> $GITHUB_ENV
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
        echo "CACHE_BUILD=${CACHE_BUILD}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_QCOW2=${UPLOAD_QCOW2}" >> $GITHUB_ENV
        echo "UPLOAD_VHDX=${UPLOAD_VHDX}" >> $GITHUB_ENV
        echo "UPLOAD_VMDK=${UPLOAD_VMDK}" >> $GITHUB_ENV
        echo "UPLOAD_IPK=${UPLOAD_IPK}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "WECHAT_WORK_PUSH=${WECHAT_WORK_PUSH}" >> $GITHUB_ENV
        echo "TELEGRAM_BOT=${TELEGRAM_BOT}" >> $GITHUB_ENV
        #添加变量
        echo "HOME=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "WORKPATH=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV

    - name: 创建模拟物理磁盘
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /github-builder
        sudo mount /dev/github/runner /github-builder
        sudo chown -R $USER:$GROUPS /github-builder
        df -Th

    - name: 下载${{matrix.target}}源码
      working-directory: /github-builder
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        TOOLCHAIN_HASH=$(cd openwrt && git log --pretty=tformat:'%h' -n1 tools toolchain || echo none)
        echo "TOOLCHAIN_HASH=$TOOLCHAIN_HASH" >> $GITHUB_ENV
        echo "$TOOLCHAIN_HASH" > openwrt/.toolchain.hash
        ln -sf /github-builder/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存加速
      uses: xcz-ns/cachewrtbuild@main
      # uses: stupidloud/cachewrtbuild@main
      if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "编译开始时间..."
        START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

    - name: 加载源,定制文件并生成自定义配置
      run: |
        # 复制配置文件到源码目录
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt

        echo "执行脚本"
        if [ -f "${WORKPATH}/$CUSTOM_SH" ]; then
        (
          chmod +x ${WORKPATH}/$CUSTOM_SH
          /bin/bash "${WORKPATH}/$CUSTOM_SH"
        )
        fi

        echo "复制脚本文件..."
        if [ -n "$(ls -A "${GITHUB_WORKSPACE}/openwrt/build/scripts/files" 2>/dev/null)" ]; then
          if [ -d "files" ];then
           cp -rf ${GITHUB_WORKSPACE}/openwrt/build/scripts/files/* files
           chmod -R 755 ${HOME}/files
          else
           cp -rf ${GITHUB_WORKSPACE}/openwrt/build/scripts/files/ files
           chmod -R 755 ${HOME}/files
          fi
        fi

        echo "复制配置文件..."
        if [ -n "$(ls -A "${WORKPATH}/files" 2>/dev/null)" ]; then
          if [ -d "files" ];then
           cp -rf ${WORKPATH}/files/* files
           chmod -R 755 ${WORKPATH}/files
          else
           cp -rf ${WORKPATH}/files/ files
           chmod -R 755 ${WORKPATH}/files
          fi
        fi

        echo "复制源码文件..."
        if [ -n "$(ls -A "${WORKPATH}/sources" 2>/dev/null)" ]; then
         cp -Rf ${WORKPATH}/sources/* ./
        fi

        echo "写入配置文件..."
        mv ${WORKPATH}/$CONFIG_FILE .config
        make defconfig

    - name: 创建 .ssh 目录
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.SSH_ACTION == 'true')
      run: mkdir -p $GITHUB_WORKSPACE/openwrt/.ssh

    - name: SSH远程连接服务器
      uses: db-one/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.SSH_ACTION == 'true')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 输出编译信息
      run: |
        cd openwrt

        echo
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT $PWD

        echo
        echo "=========================================="
        echo

        echo "	    CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "	    CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"

        echo
        echo "=========================================="
        echo


        ZZZ="package/lean/default-settings/files/zzz-default-settings"
        if [ -f "$ZZZ" ]; then
          echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
        fi

        echo "KERNEL_PATCHVER=$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
        echo "	    内核版本：$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"
        echo "	    源码分支：${{ env.REPO_BRANCH }}"

        echo "	    编译时间：${{ env.FILE_TIME1 }}"

        echo
        echo "=========================================="

        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
        sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in

        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}

        echo
        echo "=========================================="

        echo
        echo
        echo "输出完整插件信息..."
        echo
        echo
        cat .config

    - name: 下载编译所需文件
      run: |
        cd openwrt && make download -j4

    #- name: 开始编译固件
    #  id: compile
    #  run: |
    #    cd openwrt
    #    make -j$(nproc) || make -j1 V=s

    - name: 检查空间使用情况
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin



    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30     #保留最后多少记录不删除
        keep_minimum_runs: 0

    - name: 删除自动发布的旧固件
      uses: shidahuilang/delete-older-releases@main
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 20         #保留多少个releases不删除
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}