name: 'OpenWrt 编译流程'
inputs:
  target:
    description: '编译目标平台'
    required: true
    type: string
  config-file:
    description: '使用的配置文件名'
    required: true
    type: string
  firmware-message:
    description: '固件描述信息'
    required: true
    type: string
  cache-build:
    description: '是否启用缓存构建'
    required: false
    default: 'false'
    type: string
  upload-firmware:
    description: '是否上传固件'
    required: false
    default: 'true'
    type: string
  upload-qcow2:
    description: '是否上传 QCOW2 镜像'
    required: false
    default: 'false'
    type: string
  upload-vhdx:
    description: '是否上传 VHDX 镜像'
    required: false
    default: 'false'
    type: string
  upload-vmdk:
    description: '是否上传 VMDK 镜像'
    required: false
    default: 'false'
    type: string
  upload-ipk:
    description: '是否上传 IPK 包'
    required: false
    default: 'false'
    type: string
  upload-config:
    description: '是否上传配置文件'
    required: false
    default: 'false'
    type: string
  upload-release:
    description: '是否发布到 Releases'
    required: false
    default: 'false'
    type: string
  wechat-work-push:
    description: '是否推送企业微信通知'
    required: false
    default: 'false'
    type: string
  telegram-bot:
    description: '是否推送 Telegram 通知'
    required: false
    default: 'false'
    type: string
  ssh-actions:
    description: '是否启用 SSH 连接服务器'
    required: false
    default: 'false'
    type: string
  tz:
    description: '时区设置'
    required: false
    default: 'Asia/Shanghai'
    type: string
runs:
  using: "composite"
  steps:
    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update -y
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* || true
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                   bzip2 ccache clang cmake cpio curl device-tree-compiler ecj flex gawk gcc-multilib \
                   g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-i386 libelf-dev \
                   libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev \
                   libreadline-dev libssl-dev libpython3-dev libtool libyaml-dev libz-dev lld llvm lrzsz msmtp \
                   ninja-build p7zip p7zip-full patch pkgconf python3 python3 python3-ply python3-docutils \
                   python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
                   upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd libfuse-dev gettext genisoimage python3-setuptools || true
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
    - name: 编译前准备
      run: |
        sudo -E apt-get -y install xsltproc zip grep python3-pip python3-ply libc6-dev libtinfo-dev libtinfo5 ncurses-doc \
                    python2 git-core wget curl rsync dos2unix fakeroot jq libc6-dev-i386 libncurses5-dev libncursesw5 \
                    libncursesw5-dev quilt python3-distutils file g++ || true
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo timedatectl set-timezone "$TZ"
        echo
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT $PWD
    - name: 释放Ubuntu磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - name: 创建模拟物理磁盘
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /github-builder
        sudo mount /dev/github/runner /github-builder
        sudo chown -R $USER:$GROUPS /github-builder
        df -Th
    - name: 下载${{ inputs.target }}源码
      working-directory: /github-builder
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        TOOLCHAIN_HASH=$(cd openwrt && git log --pretty=tformat:'%h' -n1 tools toolchain || echo none)
        echo "TOOLCHAIN_HASH=$TOOLCHAIN_HASH" >> $GITHUB_ENV
        echo "$TOOLCHAIN_HASH" > openwrt/.toolchain.hash
        ln -sf /github-builder/openwrt $GITHUB_WORKSPACE/openwrt
    - name: 缓存使用标志
      env:
        EVENT_NAME: ${{ github.event_name }}
        INPUT_CACHE_BUILD: ${{ inputs.cache-build }}
        CACHE_BUILD: ${{ env.CACHE_BUILD }}
      run: |
        if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          if [ "$INPUT_CACHE_BUILD" = "true" ]; then
            echo "USE_CACHE=true" >> $GITHUB_ENV
          else
            echo "USE_CACHE=false" >> $GITHUB_ENV
          fi
        elif [ "$EVENT_NAME" = "schedule" ]; then
          if [ "$CACHE_BUILD" = "true" ]; then
            echo "USE_CACHE=true" >> $GITHUB_ENV
          else
            echo "USE_CACHE=false" >> $GITHUB_ENV
          fi
        else
          echo "USE_CACHE=false" >> $GITHUB_ENV
        fi
    - name: 缓存加速
      uses: xcz-ns/cachewrtbuild@main
      if: env.USE_CACHE == 'true'
      with:
        ccache: "true"
        prefix: ${{ github.workspace }}/openwrt
        mixkey: ${{ env.FIRMWARE_MESSAGE }}
    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "编译开始时间..."
        START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
    - name: 加载源,定制文件并生成自定义配置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        echo "执行脚本"
        if [ -f "${WORKPATH}/$CUSTOM_SH" ]; then
        (
          chmod +x ${WORKPATH}/$CUSTOM_SH
          /bin/bash "${WORKPATH}/$CUSTOM_SH"
        )
        fi
        echo "复制脚本文件..."
        if [ -n "$(ls -A "${GITHUB_WORKSPACE}/openwrt/build/scripts/files" 2>/dev/null)" ]; then
          if [ -d "files" ];then
           cp -rf ${GITHUB_WORKSPACE}/openwrt/build/scripts/files/* files
           chmod -R 755 ${HOME}/files
          else
           cp -rf ${GITHUB_WORKSPACE}/openwrt/build/scripts/files/ files
           chmod -R 755 ${HOME}/files
          fi
        fi
        echo "复制配置文件..."
        if [ -n "$(ls -A "${WORKPATH}/files" 2>/dev/null)" ]; then
          if [ -d "files" ];then
           cp -rf ${WORKPATH}/files/* files
           chmod -R 755 ${WORKPATH}/files
          else
           cp -rf ${WORKPATH}/files/ files
           chmod -R 755 ${WORKPATH}/files
          fi
        fi
        echo "复制源码文件..."
        if [ -n "$(ls -A "${WORKPATH}/sources" 2>/dev/null)" ]; then
         cp -Rf ${WORKPATH}/sources/* ./
        fi
        echo "写入配置文件..."
        mv ${WORKPATH}/$CONFIG_FILE .config
        make defconfig
    - name: 创建 .ssh 目录
      if: ${{ inputs.ssh-actions }} == 'true'
      run: mkdir -p $GITHUB_WORKSPACE/openwrt/.ssh
    - name: SSH远程连接服务器
      uses: db-one/debugger-action@main
      if: ${{ inputs.ssh-actions }} == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    - name: 输出编译信息
      run: |
        cd openwrt
        echo
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        echo
        echo "	    CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "	    CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo
        echo "=========================================="
        echo
        ZZZ="package/lean/default-settings/files/zzz-default-settings"
        if [ -f "$ZZZ" ]; then
          echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
        fi
        echo "KERNEL_PATCHVER=$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
        echo "	    内核版本：$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"
        echo "	    源码分支：${{ env.REPO_BRANCH }}"
        echo "	    编译时间：${{ env.FILE_TIME1 }}"
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in
        PLUGIN_LIST=$(cat Plug-in)
        echo "PLUGIN_LIST<<EOF" >> $GITHUB_ENV
        echo "$PLUGIN_LIST" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="
    - name: 下载编译所需文件
      run: |
        cd openwrt && make download -j4
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
    - name: 检查空间使用情况
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin
    - name: 整理固件文件
      id: organizer
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/pvekvm
        mkdir -p ./artifact/hyperv
        mkdir -p ./artifact/vmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        cp -rf openwrt/.config ./artifact/buildinfo/${{ inputs.target }}.config || true
        rm -rf $(find openwrt/bin/targets/ -type d -name "packages")
        cp -rf $(find openwrt/bin/packages/ -type f -name "*.ipk") ./artifact/package/ || true
        cp -rf $(find openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/ || true        
        cp -rf $(find openwrt/bin/targets/ -type f \( -name "*squashfs*efi*img*" -o -name "*squashfs*sysupgrade*bin*" -o -name "*squashfs*factory*bin*" \) ) ./artifact/firmware/
        cp -rf $(find openwrt/bin/targets/ -type f -name "*squashfs*efi*qcow2*") ./artifact/pvekvm/ || true
        cp -rf $(find openwrt/bin/targets/ -type f -name "*squashfs*efi*vhdx*") ./artifact/hyperv/ || true
        cp -rf $(find openwrt/bin/targets/ -type f -name "*squashfs*efi*vmdk*") ./artifact/vmware/ || true
        echo "编译完成时间..."
        START_SECONDS=${{ env.START_SECONDS }}
        END_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        END_SECONDS=$(date --date="$END_TIME" +%s)
        SECONDS=$((END_SECONDS-START_SECONDS))
        HOUR=$(( $SECONDS/3600 )) && MIN=$(( ($SECONDS-${HOUR}*3600)/60 )) && SEC=$(( $SECONDS-${HOUR}*3600-${MIN}*60 ))
        echo "BUILD_TIME=${HOUR}时${MIN}分${SEC}秒" >> $GITHUB_ENV
    - name: 上传固件文件
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-firmware }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_firmware_${{ env.FILE_TIME }}
        path: ./artifact/firmware/
    - name: 上传PVE/KVM镜像文件
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-qcow2 }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_pvekvm_${{ env.FILE_TIME }}
        path: ./artifact/pvekvm/
    - name: 上传Hyper-V镜像文件
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-vhdx }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_hyperv_${{ env.FILE_TIME }}
        path: ./artifact/hyperv/
    - name: 上传VMware镜像文件
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-vmdk }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_vmware_${{ env.FILE_TIME }}
        path: ./artifact/vmware/
    - name: 上传插件包文件
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-ipk }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_package_${{ env.FILE_TIME }}
        path: ./artifact/package/
    - name: 上传固件信息
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-config }} == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}_OpenWrt_buildinfo_${{ env.FILE_TIME }}
        path: ./artifact/buildinfo/
    - name: 自动发布固件到 Releases
      uses: ncipollo/release-action@main
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-release }} == 'true'
      with:
        name: ${{ env.FILE_TIME1 }} 「 ${{ inputs.firmware-message }} 」
        tag: ${{ env.FILE_TIME2 }}-${{ inputs.target }}
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        body: |
          ★  型号 : ${{ inputs.firmware-message }}
          ★  源码 : ${{ env.REPO_URL }}
          ★  分支 : ${{ env.REPO_BRANCH }}
          ★  感谢源码作者无私分享！
          🖥 内核版本：${{ env.KERNEL_PATCHVER }}
          🎈 编译时间：${{ env.FILE_TIME1 }}
          ⏰ 编译用时：${{ env.BUILD_TIME }}
          🔌 插件列表：
          ${{ env.PLUGIN_LIST }}
        artifacts: ./artifact/firmware/*
    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 9
    - name: 删除自动发布的旧固件
      uses: shidahuilang/delete-older-releases@main
      if: steps.compile.outcome == 'success' && ${{ inputs.upload-release }} == 'true'
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
    - name: 编译成功信息通知-企业微信
      if: steps.compile.outcome == 'success' && ${{ inputs.wechat-work-push }} == 'true'
      run: |
        curl "http://${{ secrets.WECHAT_WORK_URL }}/push?token=${{ secrets.WECHAT_WORK_TOKEN }}&message=\
        您的${{ inputs.firmware-message }}固件成功编译完成了！%0a%0a\
        🎈编译时间：${{ env.FILE_TIME1 }}%0a%0a\
        🖥内核版本：${{ env.KERNEL_PATCHVER }}%0a%0a\
        ⏰编译用时：${{ env.BUILD_TIME }}%0a%0a\
        🎉发布地址：${{ env.GITHUB_RELEASE }}%0a%0a\
        🌴固件已经编译完成🎈！！！" || true
    - name: 编译成功信息通知-Telegram
      if: steps.compile.outcome == 'success' && ${{ inputs.telegram-bot }} == 'true'
      run: |
        curl "https://api.telegram.org/bot ${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=
           您的${{ inputs.firmware-message }}固件成功编译完成了！
          🖥 内核版本：${{ env.KERNEL_PATCHVER }}
          🎈 编译时间：${{ env.FILE_TIME1 }}
          ⏰ 编译用时：${{ env.BUILD_TIME }}
          🎉 发布地址：${{ env.GITHUB_RELEASE }}
          🌴 固件已经编译完成 🎈！！！
          " >/dev/null 2>&1 && echo "ok..."